{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntered","setIsEntered","authorInputRef","useRef","textInputRef","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,mB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2B,2FCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAK,SAAEH,EAAMI,UAC9C,E,wBCuDeC,EApDG,SAACL,GACjB,MAAkCM,oBAAS,GAAM,mBAA1CC,EAAS,KAAEC,EAAY,KACxBC,EAAiBC,mBACjBC,EAAeD,mBAqBrB,OACE,eAAC,WAAQ,WACP,cAAC,IAAM,CAACE,KAAML,EAAWM,QAAS,SAACC,GAAQ,MAAK,iEAAiE,IACnH,cAAC,EAAI,UACH,uBAAMC,QARgB,WACxBP,GAAa,EACf,EAMsCP,UAAWC,IAAQc,KAAMC,SAvB/D,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,GAClD,EAc2F,UACpFvB,EAAM2B,WACL,qBAAK1B,UAAWC,IAAQ0B,QAAQ,SAC9B,cAACC,EAAA,EAAc,MAInB,sBAAK5B,UAAWC,IAAQ4B,QAAQ,UAC9B,uBAAOC,QAAQ,SAAQ,oBACvB,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKzB,OAEtC,sBAAKR,UAAWC,IAAQ4B,QAAQ,UAC9B,uBAAOC,QAAQ,OAAM,kBACrB,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKvB,OAEpC,qBAAKV,UAAWC,IAAQkC,QAAQ,SAC9B,wBAAQC,QA5Bc,WAC5B7B,GAAa,EACf,EA0BgDP,UAAU,MAAK,gCAMjE,E,gBC7BeqC,UAtBE,WAEb,MAA6BC,YAAQC,KAA/BC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OACbC,EAAUC,cAEhBC,qBAAU,WACQ,cAAXH,GACCC,EAAQG,KAAK,UAErB,GAAG,CAACJ,EAAQC,IAOZ,OACI,cAAC,EAAS,CAAChB,UAAsB,YAAXe,EAAsBlB,WANxB,SAAAuB,GACpBN,EAAYM,EAChB,GAOJ,C","file":"static/js/3.3348b2e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__23wnV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3TUrQ\",\"loading\":\"QuoteForm_loading__34l16\",\"control\":\"QuoteForm_control__3SaQT\",\"actions\":\"QuoteForm_actions__2URrt\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState} from 'react';\nimport {Prompt} from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const [isEntered, setIsEntered] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const finishEnteringHandler = () => {\n    setIsEntered(false); \n  };\n\n  const formFocusdHandler = () => {\n    setIsEntered(true);\n  };\n\n  return (\n    <Fragment>\n      <Prompt when={isEntered} message={(location) => 'Are you sure you want to leave? All your entered data will lost'}></Prompt>\n    <Card>\n      <form onFocus={formFocusdHandler} className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Author</label>\n          <input type='text' id='author' ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Text</label>\n          <textarea id='text' rows='5' ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button onClick={finishEnteringHandler} className='btn'>Add Quote</button>\n        </div>\n      </form>\n    </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import {useHistory} from 'react-router-dom';\r\nimport {useEffect} from 'react'\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from '../hooks/use-http';\r\nimport {addQuote} from '../lib/api';\r\n\r\nconst NewQuote = () => {\r\n\r\n    const{sendRequest, status} = useHttp(addQuote);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(status === 'completed'){\r\n            history.push('/quotes');\r\n        }\r\n    }, [status, history]);\r\n\r\n    const addQuoteHandler = quoteData => {\r\n        sendRequest(quoteData);\r\n    };\r\n\r\n\r\n    return(\r\n        <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler}></QuoteForm>\r\n    )\r\n\r\n};\r\n\r\nexport default NewQuote;"],"sourceRoot":""}